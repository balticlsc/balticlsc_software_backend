///////////////////////////////////////////////////////////
//  CTaskWriter.cs
//  Implementation of the Class CTaskWriter
//  Generated by Enterprise Architect
//  Created on:      02-mar-2020 14:45:31
//  Original author: smialek
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using Baltic.Engine.Utilities;
using Baltic.DataModel.CAL;
using Baltic.DataModel.CALExecutable;
using Baltic.DataModel.Execution;
using Baltic.Database.Entities;

namespace Baltic.Engine.TaskManager
{
	public class CTaskWriter {
		public CTask Task;
		private long TokenNo;
		private CJobBatch CurBatch;
		private CJob CurJob;
		private IDataModelImplFactory Factory;

		~CTaskWriter(){

		}

		/// 
		/// <param name="ct"></param>
		/// <param name="dmf"></param>
		public CTaskWriter(CTask ct, IDataModelImplFactory dmf){
			Task = ct;
			TokenNo = 1;
			CurBatch = null;
			CurJob = null;
			Factory = dmf;
		}

		public long GenerateNextToken(){
			long ret = TokenNo;
			TokenNo = TokenNo + 1;
			return ret;
		}

		public void GenerateJobBatch(){
			CJobBatch batch = Factory.CreateCJobBatch();
			Task.Batches.Add(batch);
			CurBatch = batch;
			CurJob = null;
		}

		///
		/// <param name="unit"></param>
		/// <param name="invs"></param>
		public void GenerateJob(ComputationModuleRelease unit, List<CustomInvariantValue> invs){
			CJob job = Factory.CreateCJob();
			job.UnitUid = unit.Uid;
			job.Multiplicity = 1;
			job.BatchUid = CurBatch.Uid;
			job.YAML = YAMLUtility.GetJobYAML(unit,invs);
			
			CurBatch.Jobs.Add(job);
			CurJob = job;
		}

		/// <param name="pin"></param>
		/// <param name="direct"></param>
		public void GenerateDataToken(DataPin pin, bool direct){
			CDataToken dt = Factory.CreateCDataToken();
			dt.TokenNo = pin.TokenNo;
			dt.PinName = pin.Name;
			dt.Binding = pin.Binding;
			dt.Multiplicity = pin.Multiplicity;
			dt.Direct = direct;
			
			if (pin is ComputedDataPin) {
				dt.PinUid = ((ComputedDataPin) pin).Declared.Uid;
				PinGroup pg = ((ComputedDataPin) pin).Group;
				if (null != pg)
					dt.Depths.AddRange(pg.Depths);
			} else
				dt.PinUid = pin.Uid;
			
			if (null == CurBatch)
				Task.Tokens.Add(dt);
			else if (null == CurJob)
				CurBatch.Tokens.Add(dt);
			else 
				CurJob.Tokens.Add(dt);
		}

	}
}//end CTaskWriter