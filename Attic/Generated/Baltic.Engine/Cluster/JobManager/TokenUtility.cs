///////////////////////////////////////////////////////////
//  TokenHelper.cs
//  Implementation of the Class TokenHelper
//  Generated by Enterprise Architect
//  Created on:      23-mar-2020 16:54:38
//  Original author: smialek
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using System.Text.RegularExpressions;
using Baltic.DataModel.CALExecutable;

namespace Baltic.Engine.Cluster.JobManager
{
	public class TokenUtility {

		public TokenUtility(){

		}

		~TokenUtility(){

		}

		/// 
		/// <param name="queueName"></param>
		/// <param name="tm"></param>
		/// <param name="batchDepthLevel"></param>
		/// <param name="merge"></param>
		public static List<SeqToken> GenerateOutputSeqStack(string queueName, TokenMessage tm, int batchDepthLevel, bool merge){
			List<SeqToken> seqStack = new List<SeqToken>();
		
			Match m = Regex.Match(queueName,@"[\w-]+\.[\w-]+(\.(?<label>[\w-]+)\.(?<value>[\w-]+))*");
			Dictionary<string,string> ll = new Dictionary<string, string>();
			for (int i = 0; i < m.Groups["label"].Captures.Count; i++)
				ll.Add(m.Groups["label"].Captures[i].Value,m.Groups["value"].Captures[i].Value);
		
			long number;
			bool fin;
			foreach (KeyValuePair<string,string> match in ll) {
				if ('f'.Equals(match.Value[match.Value.Length-1])){
					number = long.Parse(match.Value.Substring(0,match.Value.Length-1));
					fin = true;
				} else {
					number = long.Parse(match.Value);
					fin = false;
				}
				seqStack.Add(new SeqToken(){ SeqUid = match.Key, No = number, IsFinal = fin });
			}
		
			if (batchDepthLevel == ll.Count && !merge && null != tm.SeqStack) { // queue is "simple"
				foreach (SeqToken st in tm.SeqStack)
					seqStack.Add(new SeqToken() {
						SeqUid = st.SeqUid,
						No = st.No,
						IsFinal = st.IsFinal
					});
			}
		
			return seqStack;
		}
	
	}
}//end TokenHelper