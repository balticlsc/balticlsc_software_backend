///////////////////////////////////////////////////////////
//  TokenMQ.cs
//  Implementation of the Class TokenMQ
//  Generated by Enterprise Architect
//  Created on:      23-mar-2020 09:59:04
//  Original author: smialek
///////////////////////////////////////////////////////////


using Baltic.DataModel.CALExecutable;
using Baltic.Engine.Cluster;
using Baltic.Engine.MultiQueue;
using Baltic.Engine.TaskProcessor;

namespace Baltic.Engine.Cluster.JobManager
{
	public class TokenMQProxy : ITokenMQ {

		public TokenMQAPI tmq;

		public TokenMQProxy(){

		}

		~TokenMQProxy(){

		}
	
		// MOCK
		public MultiQueueMock Q;
		// MOCK

		/// 
		/// <param name="queueUid"></param>
		/// <param name="qc"></param>
		public short RegisterWithQueue(string queueUid, IQueueConsumer qc){
			Q.Consumers[queueUid] = qc;
			return 0;
		}

		/// 
		/// <param name="tm"></param>
		public short PutTokenMessage(TokenMessage tm){
			return tmq.putTokenMessage(tm);
		}

		/// 
		/// <param name="queueUid"></param>
		/// <param name="tm"></param>
		public short AckTokenMessage(string queueUid, TokenMessage tm){
			return tmq.ackTokenMessage(queueUid, tm.MsgUid);
		}

		/// 
		/// <param name="api"></param>
		public void Init(TokenMQAPI api){
			tmq = api;
		}

	}
}//end TokenMQ