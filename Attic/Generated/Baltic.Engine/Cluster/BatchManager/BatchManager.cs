///////////////////////////////////////////////////////////
//  JobManager.cs
//  Implementation of the Class JobManager
//  Generated by Enterprise Architect
//  Created on:      16-mar-2020 18:01:31
//  Original author: smialek
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Threading;
using Baltic.DataModel.CALExecutable;
using Baltic.Engine.Cluster.Cluster;
using Baltic.Engine.Cluster.JobManager;
using Baltic.Engine.Cluster;

namespace Baltic.Engine.Cluster.BatchManager
{
	public class BatchManager : IQueueConsumer, IBatches {
		private IJobRequestMQAck queue;
		private ICluster cluster;
		/// <summary>
		/// string - jobs_queue_uid
		/// </summary>
		private Dictionary<string,IJobs> BatchHandles;
		/// <summary>
		/// string - jobs_queue_uid, string - AccessType name, string - JSONParams
		/// </summary>
		private Dictionary<string,Dictionary<string,string>> StorageAccesses;

		public BatchManager(){
			BatchHandles = new Dictionary<string, IJobs>();
			StorageAccesses = new Dictionary<string, Dictionary<string, string>>();
		}

		~BatchManager(){

		}
	
		/// 
		/// <param name="q"></param>
		/// <param name="cp"></param>
		public void Init(IJobRequestMQAck q, ICluster cp){
			queue = q; cluster = cp;
		}

		/// 
		/// <param name="bm"></param>
		public short StartJobBatch(BatchMessage bm){
			IJobs jm = cluster.StartBatch(bm.YAML);
			BatchHandles.Add(bm.JobsQueueUid,jm);
			jm.SetBatchDepthLevel(bm.DepthLevel);
			StorageAccesses.Add(bm.JobsQueueUid,AccessUtility.GetStorageAccess(bm.YAML));
			queue.RegisterWithQueue(bm.JobsQueueUid,this);
			return 0;
		}

		/// 
		/// <param name="msg"></param>
		public short MessageReceived(Message msg){
			//*test* 
			Console.WriteLine(ConsoleString() + "MessageReceived from queue " + msg.QueueUid);
			//*test*
		
			if (!(msg is JobMessage)) return -1;
		
			JobMessage jm = (JobMessage) msg;
		
			// TODO - sprawdzaÄ‡, czy pierwsze uruchomienie Joba czy kolejne
			
			Dictionary<string,string> selectedAccess = new Dictionary<string, string>();
			foreach (KeyValuePair<string,string> acc in StorageAccesses[msg.QueueUid]){
				//TODO
				
			}
			String yaml = AccessUtility.AddEnvironmentToJobYAML(jm.YAML,msg.MsgUid,selectedAccess);
			IJob job = cluster.StartJob(yaml);
			IJobs jmgr = BatchHandles[msg.QueueUid];
		
			//MOCK
			((Job.Job) job).tokens = (ITokens) jmgr;
			//MOCK
		
			//*test*
			Console.WriteLine(ConsoleString() + " Job START: " + jm.YAML + "\nCN## " + jm);
			//*test*
		
			jmgr.RegisterJob(job,jm);
		
			Thread job_thread = new Thread(((Job.Job) job).runJob);
			job_thread.Start();
				
			return 0;
		}
	
		private string ConsoleString(){
			return "CN## BatchManager " + DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss.ffff") + " ## ";
		}

	}
}//end JobManager