///////////////////////////////////////////////////////////
//  JobAdapter.cs
//  Implementation of the Class JobAdapter
//  Generated by Enterprise Architect
//  Created on:      22-mar-2020 10:53:59
//  Original author: smialek
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Threading;
using Baltic.DataModel.CALExecutable;
using Baltic.Engine.Cluster.JobManager;

namespace Baltic.Engine.Cluster.Job
{
	public class Job : IJob {

		private string YAML;
		private string jobInstanceUid;
		private Dictionary<string,List<TokenMessage>> messages;
		public ITokens tokens;

		public Job(){
			messages = new Dictionary<string, List<TokenMessage>>();
		}

		~Job(){

		}
	
		/// 
		/// <param name="y"></param>
		public void init(string y){
			YAML = y; jobInstanceUid = YAML.Split(new []{'\n'})[1];
		}

		/// 
		/// <param name="tm"></param>
		public short TokenReceived(TokenMessage tm){
			if (!messages.ContainsKey(tm.PinName)) messages.Add(tm.PinName,new List<TokenMessage>());
			messages[tm.PinName].Add(tm);
			return 0;
		}

		public void runJob(){
			bool finish = false;
		
			while (!finish) {
				switch (YAML.Split(new []{'\n'})[0]) {
					case "fs001": finish = processFrameSplitter(); break;
					case "is001": finish = processTokensSplitter(); break;
					case "ip002": finish = processTokensProcessor(); break;
					case "im003": finish = processTokensMerger(); break;
					case "copy-in": finish = processCopyIn(); break;
					case "copy-out": finish = processCopyOut(); break;
				}
				Thread.Sleep(500);
			}
			//*test*
			Console.WriteLine(consoleString() + "Finished: " + YAML + " i=" + jobInstanceUid + "\n");
			//*test*
		}
	
		private bool processFrameSplitter()
		{
			// YAML == "fs001"
		
			if (!messages.ContainsKey("film") || 0 == messages["film"].Count) return false;
			TokenMessage tm = messages["film"][0];
		
			//*test*
			Console.WriteLine(consoleString() + "JobFrameSplitter: received message");
			//*test*
		
			Thread.Sleep(2000);
		
			CDataSet ds = new CDataSet() {
				Name = tm.DataSet.Name + "<split>filmf1"
			};
			TokenMessage tm2 = new TokenMessage() {
				PinName = "filmf1", DataSet = ds, SenderUid = jobInstanceUid
			};
//		job_sdk.putTokenMessage(tm2,tm.msg_uid,false);
//		
//		ds = new DataSet() {
//				name = tm.data_set.name + "<split>filmf1"
//		};
//		tm2 = new TokenMessage() {
//			pin_uid = "filmf01", data_set = ds
//		};
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
			tokens.FinalizeTokenMessageProcessing(new List<string>(){tm.MsgUid});
			messages["film"].Remove(tm);
			return true;
		}

		private bool processTokensSplitter()
		{
			// YAML == "is001"
		
			if (!messages.ContainsKey("image") || 0 == messages["image"].Count) return false;
			TokenMessage tm = messages["image"][0];
		
			//*test*
			Console.WriteLine(consoleString() + "JobImageSplitter: received message");
			//*test*
		
			Thread.Sleep(3000);
		
			CDataSet ds = new CDataSet() {
				Name = tm.DataSet.Name + "<split>imagep1"
			};
			TokenMessage tm2 = new TokenMessage() {
				PinName = "imagep1", DataSet = ds, SenderUid = jobInstanceUid
			};
			tokens.PutTokenMessage(tm2,tm.MsgUid,false);
		
			ds = new CDataSet() {
				Name = tm.DataSet.Name + "<split>imagep1"
			};
			tm2 = new TokenMessage() {
				PinName = "imagep1", DataSet = ds, SenderUid = jobInstanceUid
			};
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
		
			ds = new CDataSet() {
				Name = tm.DataSet.Name + "<split>imagep2"
			};
			tm2 = new TokenMessage() {
				PinName = "imagep2", DataSet = ds, SenderUid = jobInstanceUid
			};
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
		
			ds = new CDataSet() {
				Name = tm.DataSet.Name + "<split>imagep3"
			};
			tm2 = new TokenMessage() {
				PinName = "imagep3", DataSet = ds, SenderUid = jobInstanceUid
			};
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
			tokens.FinalizeTokenMessageProcessing(new List<string>(){tm.MsgUid});
			messages["image"].Remove(tm);
			return true;
		}
	
		private bool processTokensProcessor()
		{
			// YAML == "ip002"
		
			if (!messages.ContainsKey("imagep") || 0 == messages["imagep"].Count) return false;
			TokenMessage tm = messages["imagep"][0];
		
			//*test*
			Console.WriteLine(consoleString() + "JobImageProcessor: received message");
			//*test*
		
			Thread.Sleep(2000);
				

			CDataSet ds = new CDataSet() {
				Name = tm.DataSet.Name + "<proc>imagepp"
			};
			TokenMessage tm2 = new TokenMessage() {
				PinName = "imagepp", DataSet = ds, SenderUid = jobInstanceUid
			};
		
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
			tokens.FinalizeTokenMessageProcessing(new List<string>(){tm.MsgUid});
			messages["imagep"].Remove(tm);
			return true;
		}
	
		private bool processTokensMerger()
		{
			// YAML == "im003"
		
			string new_name = "";
			int proc = 0;
			int cnt1 = 0, cnt2 = 0, cnt3 = 0;
			TokenMessage tm = null;
		
			while (proc<3) {
				if (messages.ContainsKey("imagerp1") && cnt1 < messages["imagerp1"].Count) {
					tm = messages["imagerp1"][cnt1];
					new_name = new_name + "<imagerp1>" + tm.DataSet.Name + tm.SeqStack[0] + tm.SeqStack[1] + "|";
					cnt1++;
					if (tm.SeqStack[0].IsFinal) proc ++;
				}
				if (messages.ContainsKey("imagerp2") && cnt2 < messages["imagerp2"].Count) {
					tm = messages["imagerp2"][cnt2];
					new_name = new_name + "<imagerp2>" + tm.DataSet.Name + tm.SeqStack[0] + tm.SeqStack[1] + "|";
					cnt2++;
					if (tm.SeqStack[0].IsFinal) proc ++;
				}
				if (messages.ContainsKey("imagerp3") && cnt3 < messages["imagerp3"].Count) {
					tm = messages["imagerp3"][cnt3];
					new_name = new_name + "<imagerp3>" + tm.DataSet.Name + tm.SeqStack[0] + tm.SeqStack[1] + "|";
					cnt3++;
					if (tm.SeqStack[0].IsFinal) proc ++;
				}
				Thread.Sleep(200);
			}
		
			CDataSet ds = new CDataSet() {Name = new_name};
		
		
			//*test*
			Console.WriteLine(consoleString() + "JobImageMerger: received messages");
			//*test*
		
			Thread.Sleep(1000);

			tm = new TokenMessage() {
				PinName = "fimage", DataSet = ds, SenderUid = jobInstanceUid
			};
		
			tokens.PutTokenMessage(tm,messages["imagerp1"][0].MsgUid,true);
			//tokens.finalizeTokenMessageProcessing(new List<string>(){tm1.msg_uid,tm2.msg_uid,tm3.msg_uid});
			//messages["imagerp01"].Remove(tm);
			//messages["imagerp02"].Remove(tm);
			//messages["imagerp03"].Remove(tm);
			return true;
		}
	
		private bool processCopyIn()
		{
			// YAML == "copy-in"
		
			if (!messages.ContainsKey("input") || 0 == messages["input"].Count) return false;
			TokenMessage tm = messages["input"][0];
		
			Thread.Sleep(2000);
		
			//*test*
			Console.WriteLine(consoleString() + "JobCopyIn INPUT: " + tm.DataSet.Name + "\n");
			//*test*
		
			TokenMessage tm2 = new TokenMessage {
				DataSet = tm.DataSet,
				PinName = "output",
				SenderUid = jobInstanceUid
			};
			tokens.PutTokenMessage(tm2,tm.MsgUid,true);
			tokens.FinalizeTokenMessageProcessing(new List<string>(){tm.MsgUid});
			messages["input"].Remove(tm);
			return true;
		}
	
		private bool processCopyOut()
		{
			// YAML == "copy-out"
		
			if (!messages.ContainsKey("input") || 0 == messages["input"].Count) return false;
			if (!messages.ContainsKey("output") || 0 == messages["output"].Count) return false;
			TokenMessage tm = messages["input"][0];
		
			Thread.Sleep(1000);
		
			//*test*
			Console.WriteLine(consoleString() + "JobCopyOut FINAL OUTPUT: " + tm.DataSet.Name);
			//*test*
		
			messages["input"].Remove(tm);
			return true;
			//job_sdk.finalizeTokenMessageProcessing(new List<string>(){tm.msg_uid});
		}
	
		private string consoleString(){
			return "CN:: Job " + DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss.ffff") + " :: ";
		}

	}
}//end Job

