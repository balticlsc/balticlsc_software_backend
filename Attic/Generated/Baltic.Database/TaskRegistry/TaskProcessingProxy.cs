///////////////////////////////////////////////////////////
//  TaskRegistry.cs
//  Implementation of the Class TaskRegistry
//  Generated by Enterprise Architect
//  Created on:      02-mar-2020 11:27:19
//  Original author: smialek
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using Baltic.DataModel.CAL;
using Baltic.DataModel.CALExecutable;

namespace Baltic.Database.TaskRegistry
{
	public class TaskProcessingProxy : ITaskProcessing {
	
		List<CTask> storedTasks;
	
		public TaskProcessingProxy(){
		
		}

		~TaskProcessingProxy(){

		}
	
		public void Init(TaskRegistryMock trm){
			storedTasks = trm.StoredTasks;
		}
	
		/// 
		/// <param name="tm"></param>
		public CJobBatch GetJobBatchForToken(TokenMessage tm){
			foreach (CTask task in storedTasks)
				if (tm.TaskUid == task.Uid) 
					foreach(CJobBatch batch in task.Batches)
					foreach (CDataToken dt in batch.Tokens)
						if (tm.TokenNo == dt.TokenNo || -tm.TokenNo == dt.TokenNo) return batch;
			return null;
		}

		/// 
		/// <param name="tm"></param>
		public CJobBatch GetJobBatchForRequiredToken(TokenMessage tm){
			foreach (CTask task in storedTasks)
				if (tm.TaskUid == task.Uid) 
					foreach(CJobBatch batch in task.Batches)
					foreach (CDataToken dt in batch.Tokens)
						if ((tm.TokenNo == dt.TokenNo || -tm.TokenNo == dt.TokenNo)
						    && dt.Binding != DataBinding.Provided) return batch;
			return null;
		}
	
		/// 
		/// <param name="tm"></param>
		public CJobBatch GetJobBatchForProvidedToken(TokenMessage tm){
			foreach (CTask task in storedTasks)
				if (tm.TaskUid == task.Uid) 
					foreach(CJobBatch batch in task.Batches)
					foreach (CDataToken dt in batch.Tokens)
						if (tm.TokenNo == dt.TokenNo && dt.Binding == DataBinding.Provided) return batch;
			return null;
		}

		/// 
		/// <param name="tm"></param>
		public CJob GetJobForRequiredToken(TokenMessage tm){
			foreach (CTask task in storedTasks)
				if (tm.TaskUid == task.Uid)
					foreach(CJobBatch batch in task.Batches)
					foreach (CJob j in batch.Jobs) 
					foreach (CDataToken dt in j.Tokens)
						if (tm.TokenNo == dt.TokenNo && dt.Binding != DataBinding.Provided) return j;
			return null;
		}

		/// 
		/// <param name="job"></param>
		/// <param name="taskUid"></param>
		public CJobBatch GetJobBatchForJob(CJob job, string taskUid){
			foreach (CTask task in storedTasks)
				if (null == taskUid || task.Uid == taskUid)
					foreach(CJobBatch batch in task.Batches)
						if (job.BatchUid == batch.Uid) return batch;
			return null;
		}
	
		/// 
		/// <param name="tm"></param>
		public bool IsTaskProvidedToken(TokenMessage tm){
			foreach (CTask task in storedTasks){
				if (tm.TaskUid == task.Uid) {
					if (1 == task.Batches.Count) {
						return DataBinding.Provided == task.Batches[0].Tokens.Find(dt => dt.TokenNo == tm.TokenNo || -dt.TokenNo == tm.TokenNo).Binding;
					} else {
						CDataToken mainDT = task.Tokens.Find(dt => dt.TokenNo == tm.TokenNo || -dt.TokenNo == tm.TokenNo);
						return null != mainDT && DataBinding.Provided == mainDT.Binding;
					}
				}
			}
			return false;
		}

	}
}