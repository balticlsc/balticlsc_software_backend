///////////////////////////////////////////////////////////
//  TaskManagementProxy.cs
//  Implementation of the Class TaskManagementProxy
//  Generated by Enterprise Architect
//  Created on:      02-kwi-2020 11:25:53
//  Original author: smialek
///////////////////////////////////////////////////////////


using System.Collections.Generic;
using Baltic.DataModel.CALExecutable;

namespace Baltic.Database.TaskRegistry
{
	public class TaskManagementProxy : ITaskManagement {
	
		List<CTask> storedTasks;

		public TaskManagementProxy(){

		}

		~TaskManagementProxy(){

		}
	
		public void Init(TaskRegistryMock trm){
			storedTasks = trm.StoredTasks;
		}

		/// 
		/// <param name="task"></param>
		public void StoreTask(CTask task){
			storedTasks.Add(task);
		}

		/// 
		/// <param name="taskUid"></param>
		public CTask GetTask(string taskUid){
			return storedTasks.Find(t => t.Uid == taskUid);
		}

		/// 
		/// <param name="ds"></param>
		/// <param name="dataTokenUid"></param>
		public short SetDataSet(CDataSet ds, string dataTokenUid)
		{
			foreach (CTask task in storedTasks) {
				foreach (CDataToken dt in task.Tokens)
					if (dataTokenUid == dt.PinUid) {
						dt.DataSet = ds;
						return 0;
					}
				foreach (CJobBatch batch in task.Batches) {
					foreach (CDataToken dt in batch.Tokens)
						if (dataTokenUid == dt.PinUid) {
							dt.DataSet = ds;
							return 0;
						}
//				foreach (CJob job in batch.jobs) {
//					foreach (CDataToken dt in job.tokens)
//						if (data_token_uid == dt.pin_uid) {
//							dt.data_set = ds;
//							return 0;
//						}
//				}
				}
			}
			return -1;
		}

	}
}//end TaskManagementProxy